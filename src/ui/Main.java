package ui;

import bp.Index;
import bp.Maze;

import bp.PotentialPath;

public class Main {

	public static void main(String[] args) {
		int[][] mazeToFindPath0 = new int[][] {
				{1, -1, -1}, {1, 1, 1}, {1, -1, 1}
		};
		int[][] mazeToFindPath1 = new int[][] {
			{1, -1, -1, -1, -1}, {1, -1, 1, 1, 1}, {1, -1, 1, -1, 1}, {1, -1, 1, -1, 1}, {1, -1, 1, -1, 1}, {1, 1, 1, -1, 1}
		};
		int[][] mazeToFindPath3 = new int[][] {
			{1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}
		};
		int[][] mazeToFindPath2 = new int[][] {
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, -1, 1, 1, 1 },
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, 1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1,
						1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1,
						-1, -1, -1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1,
						1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1,
						1, 1, 1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1,
						-1, 1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1,
						1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1,
						-1, 1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1,
						-1, 1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1,
						1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1,
						1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, 1, 1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, -1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
						-1, -1, -1, -1, -1, -1, -1, -1, -1 },
				{ -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 1, 1 },
				{ -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 1, 1 }, };
		//161
		//499
		Maze myMaze = new Maze(mazeToFindPath2);
		myMaze.showMaze();
		System.out.println();
		myMaze.showPath();
		System.out.println("Number of potential paths considered: "
				+ PotentialPath.getInstancesCreated());
	}

}
